{{#demo-css}}
<h3 class="title"><b>Component</b>::mini-date-change</h3>
<desc>A helper component to the <prop>mini-datetime</prop> component which provides a UI for changing the <i>date</i> part of the datetime.</desc>

<h3>Basic Example</h3>

<row>
  <widget class="wide">
    <div>
      {{mini-date-change
        value=myDate
        defaultValue='yesterday'
        rangeToValuePosition='start'
        numDateChoices=numDateChoices
        onChange=(action 'onDateChange')
      }}
    </div>
  </widget>
  <code class='language-handlebars'>
\{{mini-date-change
  onChange=(action 'onDateChange')
  value="{{myDate}}"
  defaultValue="yesterday"
  numDateChoices={{numDateChoices}}
}}
  </code>
</row>
<row>
  <p>
    Number of Choices:
    {{ui-buttons
      buttons='3:::3,4:::4,5:::5,auto'
      value=numDateChoices
      onChange=(mut numDateChoices)
      cardinality="1:1"
    }}
  </p>
</row>
<row>
  <div>
    <h3>Properties</h3>
    <ul>
      <li>
        <h4>value</h4>
        <p>
          The <prop>value</prop> property expects a value of format <i>YYYY-MM-DD</i>.
          This is one-way bound and so any user choices to change the date will trigger a {{ui-label 'onChange'}} event.
        </p>
      </li>
      <li>
        <h4>defaultValue</h4>
        <p>
          If you are passing in an uninitialized value to the <prop>value</prop> property you can specify a default date for the UI to start at. The "defaultValue" must be a string but can be in either of either format:
          <ul>
            <li>string of format <i>YYYY-MM-DD</i></li>
            <li>named dates: "yesterday", "today", "tomorrow"</li>
          </ul>
          If you don't state this explicitly the <i>default</i> will be set to "today". In the case where no value property exists, the {{ui-label 'onChange'}} property will be fired with a code of 'suggested-default'. Both {{ui-pill 'mut'}} and {{ui-pill 'action'}} helpers will help facilitate the agreement with the container on switching to the default value.
        </p>
      </li>
      <li>
        <h4>numDateChoices</h4>
        <p>
          You can state the number of date choices that are made available. This can either be a number or the string "auto" where <i>auto</i> will try to determine the best number of buttons based on available real-estate.
        </p>
      </li>
      <li>
        <h4>rangeToValuePosition</h4>
        <p>
          This indicates where the selected date should show up relative to date range. Values are: ['start', 'middle', 'end']; the default is <i>start</i>.
        </p>
      </li>
    </ul>
    <p>
      <h3>Style</h3>
      The following CSS classes are available for you to hook into:

      <ul>
        <li>
          <h4>{{ui-pill '.ui-calendar .has-changed'}}</h4>
          <p>
            the <prop>has-changed</prop> class is added when the value has changed from the when the component first entered the stage.
          </p>
        </li>
        <li>
          <h4>{{ui-pill '.ui-calendar .today'}}</h4>
          <p>
            Name says it all. There is some subtle default styling for this which you can override.
          </p>
        </li>
        <li>
          <h4>{{ui-pill '.ui-calendar .initial'}}</h4>
          <p>
            The "initial" value is the value that this component started with when it entered the stage. This is not styled as a default but we've added some styling to the demo to allow you to "see" the effect.
          </p>
        </li>
        <li>
          <h4>{{ui-pill '.ui-calendar .weekend'}}</h4>
          <p>
            Name says it all but also note that the contra "weekday" is also added. There is some subtle default styling for this which you can override.
          </p>
        </li>
        <li>
          <h4>{{ui-pill '.ui-calendar .active'}}</h4>
          <p>
            The currently selected date.
          </p>
        </li>
      </ul>
    </p>
    <p>
      <h3>Events</h3>
      <p>
        <ul>
          <li>
            <h4>onChange</h4>
            <p>
              this event passes two parameters: (<prop>newValue</prop>, <prop>oldValue</prop>). For many, the second parameter will be redundant as it should reflect the containers current value parameter but it's included anyway ... just ignore and pull off the first param.
            </p>
          </li>
          <li></li>
        </ul>
      </p>
    </p>
  </div>
</row>


{{/demo-css}}
